<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>类型判断</title>
      <link href="/2019/09/25/%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
      <url>/2019/09/25/%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>canvas</title>
      <link href="/2019/08/26/canvas/"/>
      <url>/2019/08/26/canvas/</url>
      <content type="html"><![CDATA[<h2 id="用户交互"><a href="#用户交互" class="headerlink" title="用户交互"></a>用户交互</h2><h3 id="事件和事件执行"><a href="#事件和事件执行" class="headerlink" title="事件和事件执行"></a>事件和事件执行</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs undefined">element.addEventListener(type, handler[, useCapture]);<br><br>type: 事件类型<br>handler: 事件执行函数<br>useCapture: 可选，为布尔值false/true, 表示在冒泡/捕获阶段执行<br></code></pre></td></tr></table></figure><h3 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs undefined">utils.js文件<br><br>    //将utils定义为window对象下的一个属性，属性值为对象<br>    window.utils = &#123;&#125;;<br><br>    //在utils对象上定义捕获坐标的方法<br>    window.utils.captureMouse = function(element)&#123;<br>            //定义一个名为mouse的对象<br>            var mouse = &#123;x:0,y:0&#125;;<br>            <br>            //为元素绑定mousemove事件<br>            element.addEventListener(&apos;mousemove&apos;,function(event)&#123;<br>                var x,y;<br>                <br>                //获取鼠标位于当前屏幕的位置， 并作兼容处理<br>                if(event.pageX||event.pageY)&#123;<br>                    x = event.pageX;<br>                    y = event.pageY;<br>                &#125;else&#123;<br>                    x = event.clientX + document.body.scrollLeft +document.documentElement.scrollLeft;<br>                    y = event.clientY + document.body.scrollTop +document.documentElement.scrollTop;<br>                &#125;<br>                //将当前的坐标值减去元素的偏移位置，即为鼠标位于当前canvas的位置<br>                x -= element.offsetLeft;<br>                y -= element.offsetTop;<br><br>                mouse.x = x;<br>                mouse.y = y;<br>            &#125;,false);<br>             //返回值为mouse对象<br>             return mouse;<br>        &#125;<br></code></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;canvas id=&quot;canvas&quot; width=&apos;500&apos; height=&quot;500&quot; style=&quot;background:#000&quot;&gt;<br>       &lt;p&gt;you browser not support canvas!&lt;p&gt;<br>   &lt;/canvas&gt;<br>   &lt;script src=&apos;../js/utils.js&apos;&gt;&lt;/script&gt;<br>   &lt;script&gt;<br>       window.onload = function()&#123;<br>          var canvas = document.getElementById(&apos;canvas&apos;),<br>              //将canvas传入，该方法会返回一个包含属性x和y的对象<br>              mouse = utils.captureMouse(canvas);<br><br>          //为canvas绑定mousedown事件，当鼠标按下的时候打印出当前鼠标相对于canvas的坐标值<br>          canvas.addEventListener(&apos;mousedown&apos;,function(event)&#123;<br>            console.log(&quot;x:&quot; +mouse.x +&quot;,y:&quot; + mouse.y);<br>          &#125;);<br>   &lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs undefined">&lt;body &gt;<br>    &lt;p&gt;任意按下按键&lt;/p&gt;<br>   &lt;script&gt;<br>       window.onload = function()&#123;<br>       <br>              //定义键盘事件<br>           function onKeyboard(event)&#123;<br>              switch (event.keyCode)&#123;<br>                  case 38:<br>                      console.log(&apos;up!&apos;);<br>                      break;<br>                  case 40:<br>                      console.log(&apos;down!&apos;);<br>                      break;<br>                  case 37:<br>                      console.log(&apos;left!&apos;);<br>                      break;<br>                  case 39:<br>                      console.log(&apos;right!&apos;);<br>                      break;<br>                  default:<br>                      console.log(event.keyCode);<br>           &#125;<br>        &#125;<br>        //为window对象绑定键盘事件<br>        window.addEventListener(&apos;keydown&apos;,onKeyboard,false)；<br>       &#125;<br>    &lt;/script&gt;<br>&lt;/body&gt;<br></code></pre></td></tr></table></figure><h3 id="触摸事件"><a href="#触摸事件" class="headerlink" title="触摸事件"></a>触摸事件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs undefined">utils.js文件<br><br>    window.utils.captureTouch = function (element) &#123;<br>      var touch = &#123;<br>                      x: null,<br>                    y: null,<br>                    isPressed: false,<br>                    event: null<br>                    &#125;；<br>      var body_scrollLeft = document.body.scrollLeft,<br>          element_scrollLeft = document.documentElement.scrollLeft,<br>          body_scrollTop = document.body.scrollTop,<br>          element_scrollTop = document.documentElement.scrollTop,<br>          offsetLeft = element.offsetLeft,<br>          offsetTop = element.offsetTop;<br>          <br>     // 绑定touchstart事件<br>      element.addEventListener(&apos;touchstart&apos;, function (event) &#123;<br>        touch.isPressed = true;<br>        touch.event = event;<br>      &#125;, false);<br>      <br>     // 绑定touchend事件<br>      element.addEventListener(&apos;touchend&apos;, function (event) &#123;<br>        touch.isPressed = false;<br>        touch.x = null;<br>        touch.y = null;<br>        touch.event = event;<br>      &#125;, false);<br>      <br>     //绑定touchmove事件<br>      element.addEventListener(&apos;touchmove&apos;, function (event) &#123;<br>        var x, y,<br>            touch_event = event.touches[0]; //第一次touch<br><br>        if (touch_event.pageX || touch_event.pageY) &#123;<br>          x = touch_event.pageX;<br>          y = touch_event.pageY;<br>        &#125; else &#123;<br>          x = touch_event.clientX + body_scrollLeft + element_scrollLeft;<br>          y = touch_event.clientY + body_scrollTop + element_scrollTop;<br>        &#125;<br>        //剪去偏移量<br>        x -= offsetLeft;<br>        y -= offsetTop;<br><br>        touch.x = x;<br>        touch.y = y;<br>        touch.event = event;<br>      &#125;, false);<br>      //返回touch对象<br>      return touch;<br>    &#125;;<br></code></pre></td></tr></table></figure><h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><ol><li><p>三角函数和反三角函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sin(θ)=x/R   ---&gt;  θ = arcsin(x/R)<br>cos(θ)=y/R   ---&gt;  θ = arccos(y/R)<br>tan(θ)=x/y   ---&gt;  θ = arctan(x/y)<br></code></pre></td></tr></table></figure></li><li><p>对应到javascript中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs undefined">sin(θ)  ---&gt;  Math.sin( θ * Math.PI/180 )<br>cos(θ)  ---&gt;  Math.cos( θ * Math.PI/180 )<br>tan(θ)  ---&gt;  Math.tan( θ * Math.PI/180 )<br><br>θ = arcsin(x/R) ---&gt; Math.asin(x/R)*(180/Math.PI)<br>θ = arccos(y/R) ---&gt; Math.acos(y/R)*(180/Math.PI)<br>θ = arctan(x/y) ---&gt; Math.atan(x/y)*(180/Math.PI)<br></code></pre></td></tr></table></figure></li></ol><p>canvas中角度的表示采用的是弧度制，θ * Math.PI/180是将角度转成弧度</p><ol start="3"><li>Math.atan2(dy, dx)</li></ol>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> H5 </tag>
            
            <tag> canvas </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>HTTP协议</title>
      <link href="/2019/08/05/HTTP%E5%8D%8F%E8%AE%AE/"/>
      <url>/2019/08/05/HTTP%E5%8D%8F%E8%AE%AE/</url>
      <content type="html"><![CDATA[<h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>HTTP协议（HyperText Transfer Protocol，超文本传输协议）是用于从WWW服务器传输超文本到本地浏览器的传送协议。它可以使浏览器更加高效，使网络传输减少。它不仅保证计算机正确快速地传输超文本文档，还确定传输文档中的哪一部分，以及哪部分内容首先显示(如文本先于图形)等。</p><h3 id="在TCP-IP协议栈中的位置"><a href="#在TCP-IP协议栈中的位置" class="headerlink" title="在TCP/IP协议栈中的位置"></a>在TCP/IP协议栈中的位置</h3><p>HTTP协议通常承载于TCP协议之上，有时也承载于TLS或SSL协议层之上，这个时候，就成了我们常说的HTTPS。默认HTTP的端口号为80，HTTPS的端口号为443。</p><p><img src="https://raw.githubusercontent.com/DYZparker/MarkdownPhotos/master/img/http1.jpg" alt=""></p><h3 id="HTTP的请求响应模型"><a href="#HTTP的请求响应模型" class="headerlink" title="HTTP的请求响应模型"></a>HTTP的请求响应模型</h3><p>HTTP协议永远都是客户端发起请求，服务器回送响应。HTTP协议是一个无状态的协议，同一个客户端的这次请求和上次请求是没有对应关系。</p><p><img src="https://raw.githubusercontent.com/DYZparker/MarkdownPhotos/master/img/http2.jpg" alt=""></p><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><p>一次HTTP操作称为一个事务，其工作过程可分为四步：</p><ol><li>首先客户机与服务器需要建立连接。</li><li>客户机发送一个请求给服务器，请求方式的格式为：统一资源标识符（URL）、协议版本号，后边是MIME信息包括请求修饰符、客户机信息和可能的内容。</li><li>服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号、一个成功或错误的代码，后边是MIME信息包括服务器信息、实体信息和可能的内容。</li><li>客户端接收服务器所返回的信息通过浏览器显示在用户的显示屏上，然后客户机与服务器断开连接。</li></ol><p>如果在以上过程中的某一步出现错误，那么产生错误的信息将返回到客户端，有显示屏输出。</p><h2 id="协议详解"><a href="#协议详解" class="headerlink" title="协议详解"></a>协议详解</h2><h3 id="HTTP-1-0和HTTP-1-1的比较"><a href="#HTTP-1-0和HTTP-1-1的比较" class="headerlink" title="HTTP/1.0和HTTP/1.1的比较"></a>HTTP/1.0和HTTP/1.1的比较</h3><h4 id="建立连接方面"><a href="#建立连接方面" class="headerlink" title="建立连接方面"></a>建立连接方面</h4><ol><li>HTTP/1.0 每次请求都需要建立新的TCP连接，连接不能复用。</li><li>HTTP/1.1 新的请求可以在上次请求建立的TCP连接之上发送，连接可以复用。优点是减少重复进行TCP三次握手的开销，提高效率。</li></ol><p>注意：在同一个TCP连接中，新的请求需要等上次请求收到响应后，才能发送。</p><h4 id="Host域"><a href="#Host域" class="headerlink" title="Host域"></a>Host域</h4><p>HTTP1.1在Request消息头里头多了一个Host域, HTTP1.0则没有这个域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs undefined">GET /pub/WWW/TheProject.html HTTP/1.1<br>Host: www.w3.org<br></code></pre></td></tr></table></figure><h3 id="HTTP请求消息"><a href="#HTTP请求消息" class="headerlink" title="HTTP请求消息"></a>HTTP请求消息</h3><p>请求行  //= 方法 [空格] 请求URI [空格] 版本号 ,如GET /hello.htm HTTP/1.1</p><p>通用信息头|请求头|实体头</p><p>CRLF(回车换行)</p><p>实体内容</p><h3 id="HTTP响应消息"><a href="#HTTP响应消息" class="headerlink" title="HTTP响应消息"></a>HTTP响应消息</h3><p>状态行  //= 版本号 [空格] 状态码 [空格] 原因 ,如HTTP/1.1 200 OK</p><p>通用信息头|响应头|实体头</p><p>CRLF(回车换行)</p><p>实体内容</p><h3 id="常用的请求方式"><a href="#常用的请求方式" class="headerlink" title="常用的请求方式"></a>常用的请求方式</h3><ul><li>GET方式：是以实体的方式得到由请求URI所指定资源的信息，如果请求URI只是一个数据产生过程，那么最终要在响应实体中返回的是处理过程的结果所指向的资源，而不是处理过程的描述。</li><li>POST方式：用来向目的服务器发出请求，要求它接受被附在请求后的实体，并把它当作请求队列中请求URI所指定资源的附加新子项，Post被设计成用统一的方法实现下列功能：</li></ul><p><img src="https://raw.githubusercontent.com/DYZparker/MarkdownPhotos/master/img/http3.png" alt=""></p><h3 id="请求头"><a href="#请求头" class="headerlink" title="请求头"></a>请求头</h3><h3 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h3><h3 id="实体头"><a href="#实体头" class="headerlink" title="实体头"></a>实体头</h3><h3 id="扩展头"><a href="#扩展头" class="headerlink" title="扩展头"></a>扩展头</h3><h2 id="深入了解"><a href="#深入了解" class="headerlink" title="深入了解"></a>深入了解</h2>]]></content>
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
  
  
    
    <entry>
      <title>about</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
    <entry>
      <title>categoeies</title>
      <link href="/categoeies/index.html"/>
      <url>/categoeies/index.html</url>
      <content type="html"><![CDATA[]]></content>
    </entry>
    
  
</search>
